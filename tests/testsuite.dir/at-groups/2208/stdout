
eth.type == 0x800
eth.type == 0x800
eth.type == 0x800

vlan.present
vlan.present
vlan.present
vlan.present
!vlan.present
!vlan.present
!vlan.present
!vlan.present
!vlan.present

eth.dst[0]
eth.dst[0]
eth.dst[0]
eth.dst[0]
eth.dst[0]

!eth.dst[0]
!eth.dst[0]
!eth.dst[0]
!eth.dst[0]
!eth.dst[0]

vlan.tci[12..15] == 0x3
vlan.tci[12..15] == 0x3
vlan.tci[12..15] != 0x3
vlan.tci[12..15] != 0x3

vlan.pcp == 0
vlan.pcp == 0
vlan.pcp == 0x4
vlan.pcp != 0x4
vlan.pcp > 0x4
vlan.pcp >= 0x4
vlan.pcp < 0x4
vlan.pcp <= 0x4
vlan.pcp == 0x4
vlan.pcp != 0x4
vlan.pcp > 0x4
vlan.pcp >= 0x4
vlan.pcp < 0x4
vlan.pcp <= 0x4
vlan.pcp == 0x4
vlan.pcp != 0x4
vlan.pcp > 0x4
vlan.pcp >= 0x4
vlan.pcp < 0x4
vlan.pcp <= 0x4
vlan.pcp == 0x4
vlan.pcp != 0x4
vlan.pcp > 0x4
vlan.pcp >= 0x4
vlan.pcp < 0x4
vlan.pcp <= 0x4

vlan.pcp > 0x1 && vlan.pcp < 0x4
vlan.pcp >= 0x1 && vlan.pcp <= 0x4
vlan.pcp > 0x1 && vlan.pcp <= 0x4
vlan.pcp >= 0x1 && vlan.pcp < 0x4
vlan.pcp >= 0x1 && vlan.pcp <= 0x4
vlan.pcp < 0x4 && vlan.pcp > 0x1
vlan.pcp <= 0x4 && vlan.pcp > 0x1
vlan.pcp < 0x4 && vlan.pcp >= 0x1
vlan.pcp <= 0x4 && vlan.pcp >= 0x1
vlan.pcp <= 0x1 || vlan.pcp >= 0x4
vlan.pcp < 0x1 || vlan.pcp > 0x4
vlan.pcp <= 0x1 || vlan.pcp > 0x4
vlan.pcp < 0x1 || vlan.pcp >= 0x4
vlan.pcp < 0x1 || vlan.pcp > 0x4
vlan.pcp >= 0x4 || vlan.pcp <= 0x1
vlan.pcp > 0x4 || vlan.pcp <= 0x1
vlan.pcp >= 0x4 || vlan.pcp < 0x1
vlan.pcp > 0x4 || vlan.pcp < 0x1

vlan.pcp == 0x1 || vlan.pcp == 0x2 || vlan.pcp == 0x3 || vlan.pcp == 0x4
vlan.pcp == 0x1 || vlan.pcp == 0x2 || vlan.pcp == 0x3 || vlan.pcp == 0x4

vlan.pcp != 0x1 && vlan.pcp != 0x2 && vlan.pcp != 0x3 && vlan.pcp != 0x4
vlan.pcp == 0x1 && vlan.pcp == 0x2 && vlan.pcp == 0x3 && vlan.pcp == 0x4

vlan.pcp == 0x1 && (vlan.pcp != 0x2 || vlan.pcp != 0x3 || vlan.pcp != 0x4)
vlan.pcp == 0x1 && (vlan.pcp != 0x2 || vlan.pcp != 0x3) && vlan.pcp == 0x4
vlan.pcp == 0x1 && ((vlan.pcp == 0x2 && vlan.pcp == 0x3) || vlan.pcp != 0x4)

ip4.src[24..31] == 0xa || ip4.src[16..31] == 0xc0a8 || ip4.src[8..31] == 0xac1014 || ip4.src == 0x8080808
ip6.src == 0x1

ip4.src == 0x1020304
ip4.src == 0x1020304
ip6.src == 0x1

1
0
0
1

inport == "eth0"
inport == "eth0"

Integer field ip4.src is not compatible with string constant.
String field inport is not compatible with integer constant.
Syntax error at `=' expecting relational operator.

Only == and != operators may be used with value sets.
Only == and != operators may be used with nominal field eth.type.
Only == and != operators may be used with Boolean field vlan.present.

Nominal field inport may only be tested for equality (taking enclosing `!' operators into account).
Nominal field inport may only be tested for equality (taking enclosing `!' operators into account).
Nominal field eth.type may only be tested for equality (taking enclosing `!' operators into account).
Nominal field eth.type may only be tested for equality (taking enclosing `!' operators into account).
Syntax error at `=' expecting relational operator.

Syntax error at `123' expecting field name.

Syntax error at `$name' expecting address set name.

Syntax error at `xyzzy' expecting field name.
Syntax error at `xyzzy' expecting field name.

Cannot select subfield of string field inport.

Syntax error at `]' expecting small integer.
Syntax error at `::1' expecting small integer.
Syntax error at `18446744073709551615' expecting small integer.

Syntax error at `!' expecting `]'.

Invalid bit range 5 to 1.

Cannot select bits 12 to 16 of 16-bit field eth.type.

Cannot select subfield of nominal field eth.type.

Explicit `!= 0' is required for inequality test of multibit field against 0.

Explicit `!= 0' is required for inequality test of multibit field against 0.

Syntax error at end of input expecting relational operator.

Syntax error at `x' expecting relational operator.

Syntax error at `"eth0"' expecting integer.

Syntax error at `xyzzy' expecting constant.

Syntax error at `x' expecting `)'.

Missing parentheses around operand of !.

&& and || must be parenthesized when used together.

Syntax error at `}' expecting constant.

Only == and != operators may be used with masked constants.  Consider using subfields instead (e.g. eth.src[0..15] > 0x1111 in place of eth.src > 00:00:00:00:11:11/00:00:00:00:ff:ff).

128-bit constant is not compatible with 32-bit field ip4.src.

Range expressions must have the form `x < field < y' or `x > field > y', with each `<' optionally replaced by `<=' or `>' by `>=').

Syntax error at `x' expecting end of input.

Syntax error at `$unknownset' expecting address set name.
Syntax error at `badmac' expecting constant.
